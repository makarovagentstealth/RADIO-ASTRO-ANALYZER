require 'json'
require 'cmath'

# Carrega as configurações do payload.json
file = File.read('payload.json')
payload = JSON.parse(file)

# Constantes físicas
C = 299792458  # Velocidade da luz no vácuo (m/s)
K_BOLTZMANN = 1.380649e-23  # Constante de Boltzmann (J/K)
H = 6.62607015e-34  # Constante de Planck (J s)

# Funções para cálculos
def calc_potencia_recebida(p_tx, g_antena, d, f_atenuacao)
  (p_tx * g_antena**2) / (4 * Math::PI * d**2 * f_atenuacao)
end

def calc_potencia_radiacao_rayleigh_jeans(temp, freq)
  (2 * Math::PI * K_BOLTZMANN * temp * freq**2) / C**2
end

def calc_potencia_radiacao_planck(temp, freq)
  (H * freq) / (Math.exp(H * freq / (K_BOLTZMANN * temp)) - 1)
end

# Obtém os parâmetros do payload
frequencia_central = payload['frequencia_central']
potencia_transmitida = payload['potencia_transmitida']
ganho_antena = payload['ganho_antena']
fator_atenuacao = payload['fator_atenuacao']
distancia = payload['distancia']
temperatura = payload['temperatura']

# Calcula as potências
potencia_recebida = calc_potencia_recebida(potencia_transmitida, ganho_antena, distancia, fator_atenuacao)
potencia_radiacao_rayleigh_jeans = calc_potencia_radiacao_rayleigh_jeans(temperatura, frequencia_central)
potencia_radiacao_planck = calc_potencia_radiacao_planck(temperatura, frequencia_central)

# Exibe os resultados
puts "Potência recebida: #{potencia_recebida}"
puts "Potência de radiação (Rayleigh-Jeans): #{potencia_radiacao_rayleigh_jeans}"
puts "Potência de radiação (Planck): #{potencia_radiacao_planck}"
